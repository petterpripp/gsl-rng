#lang racket

(require ffi/unsafe 
         ffi/unsafe/define)


(define-ffi-definer gslcblas (ffi-lib "libgslcblas" #:global? #t))
(define-ffi-definer gsl (ffi-lib "libgsl"  #:global? #t))

(begin-for-syntax
  (require racket/syntax syntax/parse))

(define-syntax (make-pointer stx)
  (syntax-parse stx 
    [(_ ctype)
     (with-syntax ([pointer (format-id #'ctype "_~a-pointer" (syntax->datum #'ctype))]
                   [pointer? (format-id #'ctype "~a-pointer?" (syntax->datum #'ctype))])       
       #'(begin (define-cpointer-type pointer) (provide pointer pointer?)))]))


(make-pointer char)
(make-pointer gsl_rng_type)
(make-pointer gsl_rng)


; Turns off default gsl error handler, preventing unwanted abort of program and freeze of DrRacket.
(define _gsl_error_handler_t-pointer (_cpointer/null 'gsl_error_handler_t))
;(c2gsl "gsl_error_handler_t * gsl_set_error_handler_off();")
(gsl gsl_set_error_handler_off (_fun -> _gsl_error_handler_t-pointer))
(define previous_handler (gsl_set_error_handler_off))


(define gsl_errno
  '((GSL_SUCCESS  0  "SUCCESS")
    (GSL_FAILURE  -1 "FAILURE")
    (GSL_CONTINUE -2  "iteration has not converged")
    (GSL_EDOM     1   "input domain error, e.g sqrt(-1)")
    (GSL_ERANGE   2   "output range error, e.g. exp(1e100)")
    (GSL_EFAULT   3   "invalid pointer")
    (GSL_EINVAL   4   "invalid argument supplied by user")
    (GSL_EFAILED  5   "generic failure")
    (GSL_EFACTOR  6   "factorization failed")
    (GSL_ESANITY  7   "sanity check failed - shouldn't happen")
    (GSL_ENOMEM   8   "malloc failed")
    (GSL_EBADFUNC 9   "problem with user-supplied function")
    (GSL_ERUNAWAY 10  "iterative process is out of control")
    (GSL_EMAXITER 11  "exceeded max number of iterations")
    (GSL_EZERODIV 12  "tried to divide by zero")
    (GSL_EBADTOL  13  "user specified an invalid tolerance")
    (GSL_ETOL     14  "failed to reach the specified tolerance")
    (GSL_EUNDRFLW 15  "underflow")
    (GSL_EOVRFLW  16  "overflow")
    (GSL_ELOSS    17  "loss of accuracy")
    (GSL_EROUND   18  "failed because of roundoff error")
    (GSL_EBADLEN  19  "matrix, vector lengths are not conformant")
    (GSL_ENOTSQR  20  "matrix not square")
    (GSL_ESING    21  "apparent singularity detected")
    (GSL_EDIVERGE 22  "integral or series is divergent")
    (GSL_EUNSUP   23  "requested feature is not supported by the hardware")
    (GSL_EUNIMPL  24  "requested feature not (yet) implemented")
    (GSL_ECACHE   25  "cache limit exceeded")
    (GSL_ETABLE   26  "table limit exceeded")
    (GSL_ENOPROG  27  "iteration is not making progress towards solution")
    (GSL_ENOPROGJ 28  "jacobian evaluations are not improving the solution")
    (GSL_ETOLF    29  "cannot reach the specified tolerance in F")
    (GSL_ETOLX    30  "cannot reach the specified tolerance in X")
    (GSL_ETOLG    31  "cannot reach the specified tolerance in gradient")
    (GSL_EOF      32  "end of file")))


(define (gsl_errno_element nr)
  (let ([res (filter (lambda (x) (= (second x) nr)) gsl_errno)])
    (if ( = (length res) 1)
        (first res)
        (error (string-append "Did not find correct gsl_errno_element. nr = " (~a nr) " res = " (~a res))))))


(define (gsl_errno_symbol nr)
  (first (gsl_errno_element nr)))

(define (gsl_errno_msg nr)
  (third (gsl_errno_element nr)))

(define-syntax-rule (def-gsl f body)
  (begin
    (gsl f body)
    (provide f)))

(def-gsl gsl_rng_alloc (_fun _gsl_rng_type-pointer -> _gsl_rng-pointer))
(def-gsl gsl_rng_set (_fun _gsl_rng-pointer _ulong -> _void))
(def-gsl gsl_rng_free (_fun _gsl_rng-pointer -> _void))
(def-gsl gsl_rng_get (_fun _gsl_rng-pointer -> _ulong))
;(def-gsl gsl_rng_uniform (_fun _gsl_rng-pointer -> _double))
;(def-gsl gsl_rng_uniform_pos (_fun _gsl_rng-pointer -> _double))
;(def-gsl gsl_rng_uniform_int (_fun _gsl_rng-pointer _ulong -> _ulong))
(def-gsl gsl_rng_name (_fun _gsl_rng-pointer -> _char-pointer))
;(def-gsl gsl_rng_max (_fun _gsl_rng-pointer -> _ulong))
;(def-gsl gsl_rng_min (_fun _gsl_rng-pointer -> _ulong))
;(def-gsl gsl_rng_size (_fun _gsl_rng-pointer -> _size))
;(def-gsl gsl_rng_env_setup (_fun -> _gsl_rng_type-pointer))

;(def-gsl gsl_rng_default_seed _ulong)
;(provide gsl_rng_default_seed)

(define-syntax-rule (get-rng-type id)
  (def-gsl id _gsl_rng_type-pointer)) 

;(get-rng-type gsl_rng_default)
(get-rng-type gsl_rng_borosh13)
(get-rng-type gsl_rng_coveyou)
(get-rng-type gsl_rng_cmrg)
(get-rng-type gsl_rng_fishman18)
(get-rng-type gsl_rng_fishman20)
(get-rng-type gsl_rng_fishman2x)
(get-rng-type gsl_rng_gfsr4)
(get-rng-type gsl_rng_knuthran)
(get-rng-type gsl_rng_knuthran2)
(get-rng-type gsl_rng_knuthran2002)
(get-rng-type gsl_rng_lecuyer21)
(get-rng-type gsl_rng_minstd)
(get-rng-type gsl_rng_mrg)
(get-rng-type gsl_rng_mt19937)
(get-rng-type gsl_rng_mt19937_1999)
(get-rng-type gsl_rng_mt19937_1998)
(get-rng-type gsl_rng_r250)
(get-rng-type gsl_rng_ran0)
(get-rng-type gsl_rng_ran1)
(get-rng-type gsl_rng_ran2)
(get-rng-type gsl_rng_ran3)
(get-rng-type gsl_rng_rand)
(get-rng-type gsl_rng_rand48)
(get-rng-type gsl_rng_random128_bsd)
(get-rng-type gsl_rng_random128_glibc2)
(get-rng-type gsl_rng_random128_libc5)
(get-rng-type gsl_rng_random256_bsd)
(get-rng-type gsl_rng_random256_glibc2)
(get-rng-type gsl_rng_random256_libc5)
(get-rng-type gsl_rng_random32_bsd)
(get-rng-type gsl_rng_random32_glibc2)
(get-rng-type gsl_rng_random32_libc5)
(get-rng-type gsl_rng_random64_bsd)
(get-rng-type gsl_rng_random64_glibc2)
(get-rng-type gsl_rng_random64_libc5)
(get-rng-type gsl_rng_random8_bsd)
(get-rng-type gsl_rng_random8_glibc2)
(get-rng-type gsl_rng_random8_libc5)
(get-rng-type gsl_rng_random_bsd)
(get-rng-type gsl_rng_random_glibc2)
(get-rng-type gsl_rng_random_libc5)
(get-rng-type gsl_rng_randu)
(get-rng-type gsl_rng_ranf)
(get-rng-type gsl_rng_ranlux)
(get-rng-type gsl_rng_ranlux389)
(get-rng-type gsl_rng_ranlxd1)
(get-rng-type gsl_rng_ranlxd2)
(get-rng-type gsl_rng_ranlxs0)
(get-rng-type gsl_rng_ranlxs1)
(get-rng-type gsl_rng_ranlxs2)
(get-rng-type gsl_rng_ranmar)
(get-rng-type gsl_rng_slatec)
(get-rng-type gsl_rng_taus)
(get-rng-type gsl_rng_taus2)
(get-rng-type gsl_rng_taus113)
(get-rng-type gsl_rng_transputer)
(get-rng-type gsl_rng_tt800)
(get-rng-type gsl_rng_uni)
(get-rng-type gsl_rng_uni32)
(get-rng-type gsl_rng_vax)
(get-rng-type gsl_rng_waterman14)
(get-rng-type gsl_rng_zuf)


; don't run this file for testing:
(module test racket/base)
